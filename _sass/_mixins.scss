/* @file _mixins.scss
 * @brief A selection of Sassy mixins - lovely shorthandyness and cross-platformyness
 * @Copyright (c) 2016 Taylor Siviter
 */

/* Common Stuff
 */

@mixin size($width: 0, $height: $width) {
  width: $width;
  height: $height;
}

@mixin border-radius($val: 0) {
  -webkit-border-radius: $val;
     -moz-border-radius: $val;
       -o-border-radius: $val;
          border-radius: $val;
}

@mixin box-shadow($val: none) {
  -webkit-box-shadow: $val;
     -moz-box-shadow: $val;
          box-shadow: $val;
}

@mixin opacity($opacity: 1) {
  opacity: $opacity;
  filter: alpha(opacity=#{$opacity * 100});
}


/* MQM - Media Queries and Miscellaneous
 */

// Screen.max-width dependent styles 
@mixin media-query($device) {
  @media screen and (max-width: $device) {
    @content;
  }
}

// Screen.min-width dependent styles 
@mixin media-query-min($device) {
  @media screen and (min-width: $device) {
    @content;
  }
}

@mixin selectability($val: auto) {
  -webkit-touch-callout: $val;
   -webkit-user-select: $val;
    -khtml-user-select: $val;
      -moz-user-select: $val;
       -ms-user-select: $val;
           user-select: $val;
}


/* Animation and Transition
 */

@mixin animation($ani) {
  -webkit-animation: $ani;
     -moz-animation: $ani;
      -ms-animation: $ani;
       -o-animation: $ani;
          animation: $ani;
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content; }
     @-moz-keyframes #{$name} { @content; }
      @-ms-keyframes #{$name} { @content; }
       @-o-keyframes #{$name} { @content; }
          @keyframes #{$name} { @content; }
}

@mixin transition($ani...) {
  -webkit-transition: $ani;
     -moz-transition: $ani;
      -ms-transition: $ani;
       -o-transition: $ani;
          transition: $ani;
}


/* 3D-dom manipulation
 */

// How many pixels away from the viewport a 3D DOM-element should be placed
@mixin perspective($val: none) {
  -webkit-perspective: $val;
     -moz-perspective: $val;
      -ms-perspective: $val;
          perspective: $val;
}

// Specifies where a 3D element is based in the x and y-axis
// Remember: it is the child elements that are positioned
@mixin perspective-origin($val: 50% 50%) {
  -webkit-perspective-origin: $val;
     -moz-perspective-origin: $val;
      -ms-perspective-origin: $val;
          perspective-origin: $val;
}

// For applying a 2D or 3D transformation onto an DOM-element
@mixin transform($val: none) {
  -webkit-transform: $val;
     -moz-transform: $val;
      -ms-transform: $val;
          transform: $val;
}

// Specifies the position of transformed element
@mixin transform-origin($val: 50% 50% 0) {
  -webkit-transform-origin: $val;
     -moz-transform-origin: $val;
      -ms-transform-origin: $val;
          transform-origin: $val;
}

// Specifies how nested element of a parent are rendered in 3D-space
@mixin transform-style($val: flat) {
  -webkit-transform-style: $val;
     -moz-transform-style: $val;
      -ms-transform-style: $val;
          transform-style: $val;
}


/* Parallax Scrolling
 */

// For making a container of parallax content
// $parent The parent element of the container e.g. body
// $element The element to use as a container - remember id-selectors for this and $parent
// $width The width of the container
// $height The height of the container
// $perspective Can use the global variable $parallax-perspective for simplicity
@mixin parallax($parent, $element, $width, $height, $perspective: 1px) {
  $parallax-perspective: null !default;
  @if $parallax-perspective != null { $perspective: $parallax-perspective }
 
  @supports ((perspective: 1px) and (not (-webkit-overflow-scrolling: touch))) {
    #{$parent} {
      height: 100%;
      overflow-x: hidden;
      overflow-y: auto;
      @include transform(translateZ(0px));
    }
      
    #{$element} {
      width: $width;
      height: $height;
      position: absolute;
      overflow-x: hidden;
      overflow-y: auto;
      @include perspective($perspective);
      scroll-behavior: smooth;
      
      * { @include transform-style(preserve-3d); }
    }

    @content;
  }
}

// To be called by children of parallax-container for their parallaxyness
// $distance Distance to offset the element. Higher values = quicker scroll
// $val Any other transformations to apply onto the element
// $perspective Can use the global variable $parallax-perspective for simplicity
@mixin parallax-transform($distance: 0, $val: null, $perspective: 1px) {
  $parallax-perspective: null !default;
  @if $parallax-perspective != null { $perspective: $parallax-perspective }
  @include transform(translateZ($distance * $perspective) scale(abs(1 - $distance)) $val);
}